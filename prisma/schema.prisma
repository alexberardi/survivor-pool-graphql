generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminMessage {
  id      String  @id @default(uuid())
  userId  String
  message String
  visible Boolean
  type    String
  user    User    @relation(fields: [userId], references: [id])
}

model Game {
  id            String   @id @default(uuid())
  homeTeamId    String
  homeTeamScore Int
  awayTeamId    String
  awayTeamScore Int
  dayOfWeek     String
  gameDate      DateTime
  quarter       String
  quarterTime   String
  week          Int
  started       Boolean  @default(false)
  stadiumId     String
  oddsId        String
  espnGameId    Int      @unique
  homeTeam      NflTeam  @relation(name: "homeTeam", fields: [homeTeamId], references: [id])
  awayTeam      NflTeam  @relation(name: "awayTeam", fields: [awayTeamId], references: [id])
  stadium       Stadium  @relation(fields: [stadiumId], references: [id])
  odds          Odds     @relation(fields: [oddsId], references: [id])
  picks         Pick[]
}

model League {
  id           String       @id @default(uuid())
  name         String
  description  String
  price        Float
  leagueTypeId String
  startWeek    Int
  completed    Boolean      @default(false)
  season       Int
  leagueType   LeagueType   @relation(fields: [leagueTypeId], references: [id])
  playerTeams  PlayerTeam[]
}

model LeagueType {
  id          String   @id @default(uuid())
  name        String
  description String
  leagues     League[]
}

model NflTeam {
  id           String @id @default(uuid())
  abbreviation String
  location     String
  fullName     String
  nickname     String
  espnTeamId   Int    @unique
  homeGames    Game[] @relation(name: "homeTeam")
  awayGames    Game[] @relation(name: "awayTeam")
  picks        Pick[]
}

model Odds {
  id         String @id @default(uuid())
  details    String
  overUnder  Float
  espnGameId Int    @unique
  games      Game[]
}

model Pick {
  id           String     @id @default(uuid())
  playerTeamId String
  gameId       String
  week         Int
  nflTeamId    String
  playerTeam   PlayerTeam @relation(fields: [playerTeamId], references: [id])
  game         Game       @relation(fields: [gameId], references: [id])
  nflTeam      NflTeam    @relation(fields: [nflTeamId], references: [id])
}

model PlayerTeam {
  id       String  @id @default(uuid())
  leagueId String
  userId   String
  name     String
  active   Boolean @default(true)
  paid     Boolean @default(false)
  streak   Int
  league   League  @relation(fields: [leagueId], references: [id])
  user     User    @relation(fields: [userId], references: [id])
  picks    Pick[]
}

model Stadium {
  id            String @id @default(uuid())
  name          String
  city          String
  state         String
  roof          String
  espnStadiumId Int    @unique
  games         Game[]
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String?
  isAdmin       Boolean        @default(false)
  adminMessages AdminMessage[]
  userMessages  UserMessage[]
  playerTeams   PlayerTeam[]
}

model UserMessage {
  id          String          @id @default(uuid())
  message     String
  typeId      String
  createdAt   DateTime        @default(now())
  read        Boolean         @default(false)
  readDate    DateTime?
  userId      String
  messageType UserMessageType @relation(fields: [typeId], references: [id])
  user        User            @relation(fields: [userId], references: [id])
}

model UserMessageType {
  id           String        @id @default(uuid())
  type         String
  userMessages UserMessage[]
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  published Boolean  @default(false)
  viewCount Int      @default(0)
}
