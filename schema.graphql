### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AdminMessage {
  id: String!
  message: String!
  type: String!
  user: User
  userId: String!
  visible: Boolean!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Game {
  awayTeam: NflTeam
  awayTeamId: String!
  awayTeamScore: Int!
  dayOfWeek: String!
  espnGameId: Int!
  gameDate: DateTime
  homeTeam: NflTeam
  homeTeamId: String!
  homeTeamScore: Int!
  id: String!
  oddsId: String!
  picks: [Pick!]!
  quarter: String!
  quarterTime: String!
  stadium: Stadium
  stadiumId: String!
  started: Boolean!
  week: Int!
}

type League {
  completed: Boolean!
  description: String!
  id: String!
  leagueType: LeagueType
  leagueTypeId: String!
  name: String!
  playerTeams: [PlayerTeam!]!
  price: Float!
  season: Int!
  startWeek: Int!
}

input LeagueCreateInput {
  completed: Boolean!
  description: String!
  leagueTypeId: String!
  name: String!
  price: Float!
  season: Int!
  startWeek: Int!
}

type LeagueType {
  description: String!
  id: String!
  leagues: [League!]!
  name: String!
}

input LeagueUpdateInput {
  completed: Boolean!
  description: String!
  id: String!
  leagueTypeId: String!
  name: String!
  price: Float!
  season: Int!
  startWeek: Int!
}

type Mutation {
  adminMessageCreate(message: String!, type: String!, userId: String!, visible: Boolean!): AdminMessage!
  adminMessageUpdate(id: String!, message: String!, type: String!, userId: String!, visible: Boolean!): AdminMessage!
  gamesUpdate: [Game!]
  leagueCreate(data: LeagueCreateInput!): League!
  leagueUpdate(data: LeagueUpdateInput!): League!
  nflTeamsPopulate: [NflTeam!]
  pickMake(gameId: String!, nflTeamId: String!, playerTeamId: String!, week: Int!): Pick!
  playerTeamCreate(leagueId: String!, name: String!, userId: String!): PlayerTeam!
  playerTeamToggleActive(active: Boolean!, playerTeamId: String!): PlayerTeam!
  playerTeamTogglePaid(paid: Boolean!, playerTeamId: String!): PlayerTeam!
  playerTeamUpdate(id: String!, name: String!): PlayerTeam!
  stadiumsPopulate: [Stadium!]
}

type NflTeam {
  abbreviation: String!
  awayGames: [Game!]!
  fullName: String!
  homeGames: [Game!]!
  id: String!
  location: String!
  nickname: String!
  picks: [Pick!]!
}

type Odds {
  details: String!
  espnGameId: String!
  game: [Game!]!
  id: String!
  overUnder: Float!
}

type Pick {
  game: Game
  gameId: String!
  id: String!
  nflTeam: NflTeam
  nflTeamId: String!
  playerTeam: PlayerTeam
  playerTeamId: String!
  week: Int!
}

type PlayerTeam {
  active: Boolean!
  id: String!
  league: League
  leagueId: String!
  name: String!
  paid: Boolean!
  picks: [Pick!]!
  streak: Int!
  user: User
  userId: String!
}

input PostCreateInput {
  content: String
  title: String!
}

type Query {
  adminMessagesGetVisible: [AdminMessage]!
  gamesByWeek(week: Int): [Game]!
  leagues: [League]!
  nflTeams: [NflTeam]!
  playerTeams(leagueId: String!): [PlayerTeam]!
  users: [User]!
}

enum SortOrder {
  asc
  desc
}

type Stadium {
  city: String!
  games: [Game!]!
  id: String!
  name: String!
  roof: String!
  state: String!
}

type User {
  adminMessages: [AdminMessage]!
  email: String!
  id: String!
  name: String
  playerTeams: [PlayerTeam!]!
  userMessages: [UserMessage!]!
}

input UserCreateInput {
  email: String!
  name: String
  posts: [PostCreateInput!]
}

type UserMessage {
  createdAt: DateTime!
  id: String!
  message: String!
  messageType: UserMessageType
  read: Boolean!
  readDate: DateTime!
  typeId: String!
  user: User
  userId: String!
}

type UserMessageType {
  id: String!
  type: String!
  userMessages: [UserMessage!]!
}

input UserUniqueInput {
  email: String
  id: Int
}
